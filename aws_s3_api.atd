type records = (string * string) list <json repr="object">

type create_data_source_from_s3_req = {
    compute_statistics <json repr="ComputeStatistics">: boolean;
    data_source_id <json repr="DataSourceId">: string;
    data_source_name <json repr="DataSourceName">: string;
    data_spec <json repr="DataSpec">: {
        data_location_s3 <json repr="DataLocationS3">: string;
        data_rearrangement <json repr="DataRearrangement">: string;
        data_schema <json repr="DataSchema">: string;
        data_schema_location_s3 <json repr="DataSchemaLocationS3">: string
    }
}

type create_data_source_from_s3_resp = {
    data_source_id <json repr="DataSourceId">: string
}

type create_data_source_from_rds_req = {
    compute_statistics <json repr="ComputeStatistics">: bool;
    data_source_id <json repr="DataSourceId">: string;
    data_source_name <json repr="DataSourceName">: string;
    rds_data <json repr="RDSData">: {
        data_rearrangement <json repr="DataRearrangement">: string;
        data_schema <json repr="DataSchema">: string;
        data_schema_uri <json repr="DataSchemaUri">: string;
        database_credentials <json repr="DatabaseCredentials">: {
            password <json repr="Password">: string;
            username <json repr="Username">: string
        };
        database_information <json repr="DatabaseInformation">: {
            database_name <json repr="DatabaseName">: string;
            instance_identifier <json repr="InstanceIdentifier">: string
        };
        resource_role <json repr="ResourceRole">: string;
        s3_staging_location <json repr="S3StagingLocation">: string;
        security_group_ids <json repr="SecurityGroupIds">: [
            string
        ];
        select_sql_query <json repr="SelectSqlQuery">: string;
        service_role <json repr="ServiceRole">: string;
        subnet_id <json repr="SubnetId">: string
    };
    role_a_R_N <json repr="RoleARN">: string
}

type create_data_source_from_rds_resp = {
    data_source_id <json repr="DataSourceId">: string
}

type create_data_source_from_redshift_req = {
    compute_statistics <json repr="ComputeStatistics">: bool;
    data_source_id <json repr="DataSourceId">: string;
    data_source_name <json repr="DataSourceName">: string;
    data_spec <json repr="DataSpec">: {
        data_rearrangement <json repr="DataRearrangement">: string;
        data_schema <json repr="DataSchema">: string;
        data_schema_uri <json repr="DataSchemaUri">: string;
        database_credentials <json repr="DatabaseCredentials">: {
            password <json repr="Password">: string;
            username <json repr="Username">: string
        };
        database_information <json repr="DatabaseInformation">: {
            cluster_identifier <json repr="ClusterIdentifier">: string;
            database_name <json repr="DatabaseName">: string
        };
        s3_staging_location <json repr="S3StagingLocation">: string;
        select_sql_query <json repr="SelectSqlQuery">: string
    };
    role_a_R_N <json repr="RoleARN">: string
}

type create_data_source_from_redshift_resp = {
    data_source_id <json repr="DataSourceId">: string
}

type get_data_source_req = {
    data_source_id <json repr="DataSourceId">: string;
    verbose <json repr="Verbose">: bool
}

type data_source = {
    compute_statistics <json repr="ComputeStatistics">: bool;
    created_at <json repr="CreatedAt">: number;
    created_by_iam_user <json repr="CreatedByIamUser">: string;
    data_location_s3 <json repr="DataLocationS3">: string;
    data_rearrangement <json repr="DataRearrangement">: string;
    data_size_in_bytes <json repr="DataSizeInBytes">: number;
    data_source_id <json repr="DataSourceId">: string;
    data_source_schema <json repr="DataSourceSchema">: string;
    last_updated_at <json repr="LastUpdatedAt">: number;
    log_uri <json repr="LogUri">: string;
    message <json repr="Message">: string;
    name <json repr="Name">: string;
    number_of_files <json repr="NumberOfFiles">: number;
    rds_metadata <json repr="RDSMetadata">: {
        data_pipeline_id <json repr="DataPipelineId">: string;
        database <json repr="Database">: {
            database_name <json repr="DatabaseName">: string;
            instance_identifier <json repr="InstanceIdentifier">: string
        };
        database_user_name <json repr="DatabaseUserName">: string;
        resource_role <json repr="ResourceRole">: string;
        select_sql_query <json repr="SelectSqlQuery">: string;
        service_role <json repr="ServiceRole">: string
    };
    redshift_metadata <json repr="RedshiftMetadata">: {
        database_user_name <json repr="DatabaseUserName">: string;
        redshift_database <json repr="RedshiftDatabase">: {
            cluster_identifier <json repr="ClusterIdentifier">: string;
            database_name <json repr="DatabaseName">: string
        };
        select_sql_query <json repr="SelectSqlQuery">: string
    };
    role_a_R_N <json repr="RoleARN">: string;
    status <json repr="Status">: string
}

type get_data_source_resp = data_source

type update_data_source_req = {
    data_source_id <json repr="DataSourceId">: string;
    data_source_name <json repr="DataSourceName">: string
}

type update_data_source_resp = {
    data_source_id <json repr="DataSourceId">: string
}

type describe_req = {
    e_Q <json repr="EQ">: string;
    filter_variable <json repr="FilterVariable">: string;
    g_E <json repr="GE">: string;
    g_T <json repr="GT">: string;
    l_E <json repr="LE">: string;
    limit <json repr="Limit">: number;
    l_T <json repr="LT">: string;
    n_E <json repr="NE">: string;
    next_token <json repr="NextToken">: string;
    prefix <json repr="Prefix">: string;
    sort_order <json repr="SortOrder">: string
}

type describe_data_sources_req = describe_req

type 'a page = {
    next_token <json repr="NextToken">: string;
    results <json repr="Results">: 'a list;
}

type describe_data_sources_resp = data_source page

type delete_data_source_req = {
    data_source_id <json repr="DataSourceId">: string
}

type delete_data_source_resp = {
    data_source_id <json repr="DataSourceId">: string
}

type create_ml_model_req = {
    m_l_model_id <json repr="MLModelId">: string;
    m_l_model_name <json repr="MLModelName">: string;
    m_l_model_type <json repr="MLModelType">: string;
    parameters <json repr="Parameters">:
        {
            string :
                string
        };
    recipe <json repr="Recipe">: string;
    recipe_uri <json repr="RecipeUri">: string;
    training_data_source_id <json repr="TrainingDataSourceId">: string
}

type ml_model = {
    created_at <json repr="CreatedAt">: number;
    created_by_iam_user <json repr="CreatedByIamUser">: string;
    endpoint_info <json repr="EndpointInfo">: {
        created_at <json repr="CreatedAt">: number;
        endpoint_status <json repr="EndpointStatus">: string;
        endpoint_url <json repr="EndpointUrl">: string;
        peak_requests_per_second <json repr="PeakRequestsPerSecond">: number
    };
    input_data_location_s3 <json repr="InputDataLocationS3">: string;
    last_updated_at <json repr="LastUpdatedAt">: number;
    log_uri <json repr="LogUri">: string;
    message <json repr="Message">: string;
    m_l_model_id <json repr="MLModelId">: string;
    m_l_model_type <json repr="MLModelType">: string;
    name <json repr="Name">: string;
    recipe <json repr="Recipe">: string;
    schema <json repr="Schema">: string;
    score_threshold <json repr="ScoreThreshold">: number;
    score_threshold_last_updated_at <json repr="ScoreThresholdLastUpdatedAt">:
                                               number;
    size_in_bytes <json repr="SizeInBytes">: number;
    status <json repr="Status">: string;
    training_data_source_id <json repr="TrainingDataSourceId">: string;
    training_parameters <json repr="TrainingParameters">:
        {
            string :
                string
        }
}

type create_ml_model_resp = {
    m_l_model_id <json repr="MLModelId">: string
}

type get_ml_model_req = {
    m_l_model_id <json repr="MLModelId">: string;
    verbose <json repr="Verbose">: bool
}

type get_ml_model_resp = ml_model

type update_ml_model_req = {
    m_l_model_id <json repr="MLModelId">: string;
    m_l_model_name <json repr="MLModelName">: string;
    score_threshold <json repr="ScoreThreshold">: number
}

type update_ml_model_resp = {
    m_l_model_id <json repr="MLModelId">: string
}

type describe_ml_models_req = describe_req

type describe_ml_models_resp = ml_model page

type delete_ml_model_req = {
    m_l_model_id <json repr="MLModelId">: string
}

type delete_ml_model_resp = {
    m_l_model_id <json repr="MLModelId">: string
}

type create_evaluation_req = {
    evaluation_data_source_id <json repr="EvaluationDataSourceId">: string;
    evaluation_id <json repr="EvaluationId">: string;
    evaluation_name <json repr="EvaluationName">: string;
    m_l_model_id <json repr="MLModelId">: string
}

type create_evaluation_resp = {
    evaluation_id <json repr="EvaluationId">: string
}

type get_evaluation_req = {
    evaluation_id <json repr="EvaluationId">: string
}

type evaluation = {
    created_at <json repr="CreatedAt">: number;
    created_by_iam_user <json repr="CreatedByIamUser">: string;
    evaluation_data_source_id <json repr="EvaluationDataSourceId">: string;
    evaluation_id <json repr="EvaluationId">: string;
    input_data_location_s3 <json repr="InputDataLocationS3">: string;
    last_updated_at <json repr="LastUpdatedAt">: number;
    log_uri <json repr="LogUri">: string;
    message <json repr="Message">: string;
    m_l_model_id <json repr="MLModelId">: string;
    name <json repr="Name">: string;
    performance_metrics <json repr="PerformanceMetrics">: {
        properties <json repr="Properties">:
            {
                string :
                    string
            }
    };
    status <json repr="Status">: string
}

type get_evaluation_resp = evaluation

type update_evaluation_req = {
    evaluation_id <json repr="EvaluationId">: string;
    evaluation_name <json repr="EvaluationName">: string
}

type update_evaluation_resp = {
    evaluation_id <json repr="EvaluationId">: string
}

type describe_evaluations_req = describe_req

type describe_evaluations_resp = evaluation page

type delete_evaluation_req = {
    evaluation_id <json repr="EvaluationId">: string
}

type delete_evaluation_resp = {
    evaluation_id <json repr="EvaluationId">: string
}

type create_batch_prediction_req = {
    batch_prediction_data_source_id <json repr="BatchPredictionDataSourceId">:
                                               string;
    batch_prediction_id <json repr="BatchPredictionId">: string;
    batch_prediction_name <json repr="BatchPredictionName">: string;
    m_l_model_id <json repr="MLModelId">: string;
    output_uri <json repr="OutputUri">: string
}

type create_batch_prediction_resp = {
    batch_prediction_id <json repr="BatchPredictionId">: string
}

type get_batch_prediction_req = {
    batch_prediction_id <json repr="BatchPredictionId">: string
}

type batch_prediction = {
    batch_prediction_data_source_id <json repr="BatchPredictionDataSourceId">:
                                               string;
    batch_prediction_id <json repr="BatchPredictionId">: string;
    created_at <json repr="CreatedAt">: number;
    created_by_iam_user <json repr="CreatedByIamUser">: string;
    input_data_location_s3 <json repr="InputDataLocationS3">: string;
    last_updated_at <json repr="LastUpdatedAt">: number;
    log_uri <json repr="LogUri">: string;
    message <json repr="Message">: string;
    m_l_model_id <json repr="MLModelId">: string;
    name <json repr="Name">: string;
    output_uri <json repr="OutputUri">: string;
    status <json repr="Status">: string
}

type get_batch_prediction_resp = batch_prediction

type update_batch_prediction_req = {
    batch_prediction_id <json repr="BatchPredictionId">: string;
    batch_prediction_name <json repr="BatchPredictionName">: string
}

type update_batch_prediction_resp = {
    batch_prediction_id <json repr="BatchPredictionId">: string
}

type describe_batch_predictions_req = describe_req

type describe_batch_predictions_resp = batch_prediction page

type delete_batch_prediction_req = {
    batch_prediction_id <json repr="BatchPredictionId">: string
}

type delete_batch_prediction_resp = {
    batch_prediction_id <json repr="BatchPredictionId">: string
}

type create_realtime_endpoint_req = {
    m_l_model_id <json repr="MLModelId">: string
}

type create_realtime_endpoint_resp = {
    m_l_model_id <json repr="MLModelId">: string;
    realtime_endpoint_info <json repr="RealtimeEndpointInfo">: {
        created_at <json repr="CreatedAt">: number;
        endpoint_status <json repr="EndpointStatus">: string;
        endpoint_url <json repr="EndpointUrl">: string;
        peak_requests_per_second <json repr="PeakRequestsPerSecond">: number
    }
}

type delete_realtime_endpoint_req = {
    m_l_model_id <json repr="MLModelId">: string
}

type delete_realtime_endpoint_resp = {
    m_l_model_id <json repr="MLModelId">: string;
    realtime_endpoint_info <json repr="RealtimeEndpointInfo">: {
        created_at <json repr="CreatedAt">: number;
        endpoint_status <json repr="EndpointStatus">: string;
        endpoint_url <json repr="EndpointUrl">: string;
        peak_requests_per_second <json repr="PeakRequestsPerSecond">: number
    }
}

type predict_req = {
    m_l_model_id <json repr="MLModelId">: string;
    predict_endpoint <json repr="PredictEndpoint">: string;
    record <json repr="Record">:
        {
            string :
                string
        }
}

type predict_resp = {
    prediction <json repr="Prediction">: {
        details <json repr="Details">:
            {
                string :
                    string
            };
        predicted_label <json repr="PredictedLabel">: string;
        predicted_scores <json repr="PredictedScores">:
            {
                string :
                    number
            };
        predicted_value <json repr="PredictedValue">: number
    }
}
